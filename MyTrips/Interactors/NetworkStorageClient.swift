//
//  DatabaseInteractor.swift
//  MyTrips
//
//  Created by Ethan Joseph on 10/16/19.
//  Copyright Â© 2019 Joseph, Ethan. All rights reserved.
//

import Foundation
import FirebaseFirestore
import FirebaseAuth

class NetworkStorageClient: NetworkStorageProtocol {
    func updateTrip(_ trip: PrimaryLocation, _ userId: String) {
          var subs = [[String : Any]]()
              let sublocations = trip.subLocations
              for sublocation in sublocations {
                  
                      let locationData = ["label" : sublocation.label as Any,
                                          "date" : sublocation.date as Any,
                                          "placeId" : sublocation.placeID,
                                          "notes" : sublocation.notes] as [String : Any]
                      
                      subs.append(locationData)
              }

              let docData : [String : Any] = ["owner" : userId,
                                              "placeId" : trip.placeID,
                                              "label" : trip.label,
                                              "locationId" : trip.locationId,
                                              "subLocations" : subs]
              
              Firestore.firestore().collection("trips").addDocument(data: docData)
        //need to be able to get the document path from the model - if we create it or pull it down we should have it saved on the model so we can easily update it
              //Firestore.firestore().collection("trips").document(<#T##documentPath: String##String#>)
    }
    
    func saveNewTrip(_ trip: PrimaryLocation, _ userId: String) {
        var subs = [[String : Any]]()
            let sublocations = trip.subLocations
            for sublocation in sublocations {
                
                    let locationData = ["label" : sublocation.label as Any,
                                        "date" : sublocation.date as Any,
                                        "placeId" : sublocation.placeID,
                                        "notes" : sublocation.notes] as [String : Any]
                    
                    subs.append(locationData)
            }

            let docData : [String : Any] = ["owner" : userId,
                                            "placeId" : trip.placeID,
                                            "label" : trip.label,
                                            "locationId" : trip.locationId,
                                            "subLocations" : subs]
            
            Firestore.firestore().collection("trips").addDocument(data: docData)
        //the doc ref id generated by the server when we add a new document should be added as a property to the model so that when we want to update it we can provide the path that should update
    }
}

protocol NetworkStorageProtocol {
    func saveNewTrip(_ trip: PrimaryLocation, _ userId: String)
    //updates existing trip in storage
    func updateTrip(_ trip: PrimaryLocation, _ userId: String)
}
